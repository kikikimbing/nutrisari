// Mocks generated by Mockito 5.4.0 from annotations
// in nutrisari/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mekari_network/mekari_network.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nutrisari/core/networking/networking.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMKRNetwork_0 extends _i1.SmartFake implements _i2.MKRNetwork {
  _FakeMKRNetwork_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Networking].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworking extends _i1.Mock implements _i3.Networking {
  MockNetworking() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MKRNetwork get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeMKRNetwork_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.MKRNetwork);
  @override
  _i4.Future<dynamic> getRequest({required String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequest,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}
