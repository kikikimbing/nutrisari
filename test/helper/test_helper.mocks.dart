// Mocks generated by Mockito 5.4.0 from annotations
// in nutrisari/test/helper/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mekari_network/mekari_network.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:nutrisari/core/error/failures.dart' as _i10;
import 'package:nutrisari/core/networking/networking.dart' as _i6;
import 'package:nutrisari/data/datasources/food_remote_datasource.dart' as _i8;
import 'package:nutrisari/data/datasources/name_local_datasource.dart' as _i9;
import 'package:nutrisari/data/models/food/food_model.dart' as _i3;
import 'package:nutrisari/domain/entities/food.dart' as _i11;
import 'package:nutrisari/domain/repository/food_repository.dart' as _i5;
import 'package:nutrisari/domain/repository/name_repository.dart' as _i12;
import 'package:nutrisari/domain/usecases/get_food_detail_usecase.dart' as _i14;
import 'package:nutrisari/domain/usecases/get_food_list_usecase.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMKRNetwork_0 extends _i1.SmartFake implements _i2.MKRNetwork {
  _FakeMKRNetwork_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFoodModel_1 extends _i1.SmartFake implements _i3.FoodModel {
  _FakeFoodModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFoodRepository_3 extends _i1.SmartFake
    implements _i5.FoodRepository {
  _FakeFoodRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Networking].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworking extends _i1.Mock implements _i6.Networking {
  MockNetworking() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MKRNetwork get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeMKRNetwork_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.MKRNetwork);
  @override
  _i7.Future<dynamic> getRequest({required String? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRequest,
          [],
          {#params: params},
        ),
        returnValue: _i7.Future<dynamic>.value(),
      ) as _i7.Future<dynamic>);
}

/// A class which mocks [FoodRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodRemoteDataSource extends _i1.Mock
    implements _i8.FoodRemoteDataSource {
  MockFoodRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i3.FoodModel>> getFoodListByName(
          {required String? foodName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodListByName,
          [],
          {#foodName: foodName},
        ),
        returnValue: _i7.Future<List<_i3.FoodModel>>.value(<_i3.FoodModel>[]),
      ) as _i7.Future<List<_i3.FoodModel>>);
  @override
  _i7.Future<_i3.FoodModel> getFoodDetailById({required String? foodId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodDetailById,
          [],
          {#foodId: foodId},
        ),
        returnValue: _i7.Future<_i3.FoodModel>.value(_FakeFoodModel_1(
          this,
          Invocation.method(
            #getFoodDetailById,
            [],
            {#foodId: foodId},
          ),
        )),
      ) as _i7.Future<_i3.FoodModel>);
}

/// A class which mocks [NameLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameLocalDataSource extends _i1.Mock
    implements _i9.NameLocalDataSource {
  MockNameLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<String> getName() => (super.noSuchMethod(
        Invocation.method(
          #getName,
          [],
        ),
        returnValue: _i7.Future<String>.value(''),
      ) as _i7.Future<String>);
  @override
  _i7.Future<bool> setName({required String? name}) => (super.noSuchMethod(
        Invocation.method(
          #setName,
          [],
          {#name: name},
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [FoodRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFoodRepository extends _i1.Mock implements _i5.FoodRepository {
  MockFoodRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i10.Failure, List<_i11.Food>>> getFoodListByName(
          {required String? foodName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodListByName,
          [],
          {#foodName: foodName},
        ),
        returnValue:
            _i7.Future<_i4.Either<_i10.Failure, List<_i11.Food>>>.value(
                _FakeEither_2<_i10.Failure, List<_i11.Food>>(
          this,
          Invocation.method(
            #getFoodListByName,
            [],
            {#foodName: foodName},
          ),
        )),
      ) as _i7.Future<_i4.Either<_i10.Failure, List<_i11.Food>>>);
  @override
  _i7.Future<_i4.Either<_i10.Failure, _i11.Food>> getFoodDetailById(
          {required String? foodId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFoodDetailById,
          [],
          {#foodId: foodId},
        ),
        returnValue: _i7.Future<_i4.Either<_i10.Failure, _i11.Food>>.value(
            _FakeEither_2<_i10.Failure, _i11.Food>(
          this,
          Invocation.method(
            #getFoodDetailById,
            [],
            {#foodId: foodId},
          ),
        )),
      ) as _i7.Future<_i4.Either<_i10.Failure, _i11.Food>>);
}

/// A class which mocks [NameRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNameRepository extends _i1.Mock implements _i12.NameRepository {
  MockNameRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i4.Either<_i10.Failure, String>> getName() => (super.noSuchMethod(
        Invocation.method(
          #getName,
          [],
        ),
        returnValue: _i7.Future<_i4.Either<_i10.Failure, String>>.value(
            _FakeEither_2<_i10.Failure, String>(
          this,
          Invocation.method(
            #getName,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i10.Failure, String>>);
  @override
  _i7.Future<_i4.Either<_i10.Failure, bool>> setName({required String? name}) =>
      (super.noSuchMethod(
        Invocation.method(
          #setName,
          [],
          {#name: name},
        ),
        returnValue: _i7.Future<_i4.Either<_i10.Failure, bool>>.value(
            _FakeEither_2<_i10.Failure, bool>(
          this,
          Invocation.method(
            #setName,
            [],
            {#name: name},
          ),
        )),
      ) as _i7.Future<_i4.Either<_i10.Failure, bool>>);
}

/// A class which mocks [GetFoodListUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFoodListUseCase extends _i1.Mock
    implements _i13.GetFoodListUseCase {
  MockGetFoodListUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FoodRepository get foodRepository => (super.noSuchMethod(
        Invocation.getter(#foodRepository),
        returnValue: _FakeFoodRepository_3(
          this,
          Invocation.getter(#foodRepository),
        ),
      ) as _i5.FoodRepository);
  @override
  _i7.Future<_i4.Either<_i10.Failure, List<_i11.Food>>> call(
          String? foodName) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [foodName],
        ),
        returnValue:
            _i7.Future<_i4.Either<_i10.Failure, List<_i11.Food>>>.value(
                _FakeEither_2<_i10.Failure, List<_i11.Food>>(
          this,
          Invocation.method(
            #call,
            [foodName],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i10.Failure, List<_i11.Food>>>);
}

/// A class which mocks [GetFoodDetailUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetFoodDetailUseCase extends _i1.Mock
    implements _i14.GetFoodDetailUseCase {
  MockGetFoodDetailUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FoodRepository get foodRepository => (super.noSuchMethod(
        Invocation.getter(#foodRepository),
        returnValue: _FakeFoodRepository_3(
          this,
          Invocation.getter(#foodRepository),
        ),
      ) as _i5.FoodRepository);
  @override
  _i7.Future<_i4.Either<_i10.Failure, _i11.Food>> call(String? foodId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [foodId],
        ),
        returnValue: _i7.Future<_i4.Either<_i10.Failure, _i11.Food>>.value(
            _FakeEither_2<_i10.Failure, _i11.Food>(
          this,
          Invocation.method(
            #call,
            [foodId],
          ),
        )),
      ) as _i7.Future<_i4.Either<_i10.Failure, _i11.Food>>);
}
